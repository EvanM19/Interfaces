import streamlit as st
from datetime import datetime, timedelta
import markowitz

# Configuration de la page
st.set_page_config(page_title="Mod√®le d'allocation d'actifs : th√©orie de Markowitz", layout="wide")

# Dictionnaire des actifs avec leurs tickers
actifs = {
    "S&P500": "^GSPC",
    "CAC40": "^FCHI",
    "DAX": "^GDAXI",
    "NIKKEI": "^N225",
    "FTSE": "^FTSE",
    "EUR/USD": "EURUSD=X",
    "GOLD": "GC=F",
    "BITCOIN": "BTC-USD",
    "PETROLE": "CL=F", 
    "US 5Y Treasury Bonds":"^FVX",
    "US 10Y Treasury Bonds":"^TNX",
    "US 30Y Treasury Bonds":"^TYX"
}

# Titre de l'application
st.title("Mod√®le d'allocation d'actifs : th√©orie de Markowitz")

# Section 1 : S√©lection des actifs
st.subheader("1. S√©lectionnez les actifs financiers")
st.markdown("Veuillez s√©lectionner au moins deux actifs. La th√©orie de Markowitz √©tant bas√©e sur la diversification, il est vivement recommand√© de s√©lectionner l‚Äôensemble des actifs dans un premier temps. Une s√©lection plus cibl√©e pourra ensuite √™tre effectu√©e.")
selected_names = st.multiselect(
    "Choisissez les actifs √† suivre :",
    options=list(actifs.keys()),
    default=[]  # Pas de s√©lection par d√©faut
)

# Ligne de s√©paration
st.markdown("---")

# Section 2 : S√©lection des dates
st.subheader("2. S√©lectionnez les dates de d√©but et de fin")
st.markdown("Assurez-vous de disposer d'un historique d'au moins un an.")
col1, col2 = st.columns(2)

with col1:
    start_date = st.date_input("Date de d√©but :", datetime(2020, 1, 1))

with col2:
    end_date = st.date_input("Date de fin :", datetime.today())

# Ligne de s√©paration
st.markdown("---")

# Section 3 : Taux sans risque
st.subheader("3. S√©lectionnez le taux sans risque")
taux_sans_risque = st.number_input("Taux sans risque :", value=0.04, min_value=0.0, max_value=1.0)

# Validation des entr√©es
if st.button("Valider les donn√©es"):
    if len(selected_names) <= 1:
        st.error("Veuillez s√©lectionner au moins deux actifs financiers.")
    elif start_date > end_date:
        st.error("La date de d√©but ne peut pas √™tre post√©rieure √† la date de fin.")
    elif (end_date - start_date) < timedelta(days=365):
        st.error("L'√©cart entre les dates doit √™tre d'au moins 1 an.")
    else:
        st.success("Les donn√©es ont √©t√© valid√©es avec succ√®s.")

        # Construire le dictionnaire des actifs s√©lectionn√©s
        try:
            selected_dict = {name: actifs[name] for name in selected_names}

            # Extraction des rendements
            rendements = markowitz.extract_rendements(selected_dict, start_date, end_date)

            if rendements.empty:
                st.warning("Aucune donn√©e n'a √©t√© r√©cup√©r√©e pour les actifs et les dates s√©lectionn√©s.")
            else:
                st.markdown("---")
                # Afficher les corr√©lations
                st.subheader("4. Pr√©sentation du mod√®le de Markowitz")

                # Ajouter une description avec des emojis
                st.write("üí° Voici les hypoth√®ses principales :")

                # Utiliser st.markdown avec une liste en Markdown
                st.markdown("""
                - üéØ **D√©cisions rationnelles** uniquement bas√©es sur le couple rendement-risque
                - üìä **Contr√¥le du risque** via la diversification
                - üí∞ Acc√®s **illimit√© au taux sans risque** pour pr√™ter ou emprunter
                - ‚öñÔ∏è **Absence de co√ªts de transactions** et de variations de position dominante sur le march√©
                """)

                # Ajouter une section pour la construction math√©matique
                st.write("üßÆ **Construction math√©matique du mod√®le :**")

                # Afficher une formule en LaTeX
                st.latex(r"""
                \text{Minimisation du risque sous contrainte de rendement cible } \mu_T:
                """)
                st.latex(r"""
                \text{argmin}_{\omega} \quad \omega^T \Sigma \omega
                """)
                st.latex(r"""
                \text{Sous contraintes : }
                """)
                st.latex(r"""
                \omega^T \mu \geq \mu_T, \quad \omega^T \mathbf{1} = 1
                """)
                st.latex(r"""
                \text{üîç Remarque : La matrice de variance-covariance } \Sigma \text{ doit √™tre inversible pour garantir une solution optimale.}
                """)

                # Ajouter une ligne de s√©paration
                st.markdown("---")

                # Afficher les corr√©lations
                st.subheader("5. Corr√©lations entre les actifs")
                fig_correlation = markowitz.plot_matrice_correlation(rendements)
                st.pyplot(fig_correlation)
                st.markdown("La matrice de corr√©lation permet d'identifier les actifs faiblement corr√©l√©s et de v√©rifier l'hypoth√®se d'inversibilit√© de la matrice de covariance. Veillez √† retirer les actifs trop corr√©l√©s, puis relancez l'analyse.")
                st.markdown("---")

                # Afficher les statistiques des actifs
                st.subheader("6. Statistiques annuelles des actifs")
                df = markowitz.statistiques_rendements(rendements, taux_sans_risque)
                st.dataframe(df)
                st.markdown("---")

                # Fronti√®re efficiente de Markowitz
                st.subheader("7. Fronti√®re efficiente de Markowitz")
                st.markdown("L'intersection entre la tangente passant par le taux sans risque et la fronti√®re efficiente de Markowitz permet d'identifier le portefeuille optimal. Si l'on souhaite un risque inf√©rieur √† celui de ce portefeuille, une partie des fonds est investie dans celui-ci, tandis que le reste est plac√© en cash, maximisant ainsi le rendement ajust√© au risque. √Ä l‚Äôinverse, pour prendre plus de risque, il est possible d'emprunter au taux sans risque et d'investir l'int√©gralit√© des fonds dans le portefeuille optimal.")

                # Calcul des fronti√®res efficientes
                fig_frontiere_avec_contraintes, df_frontiere_avec_contraintes = markowitz.calculate_efficient_frontier(
                    rendements, risk_free_rate=taux_sans_risque, contraintes=True
                )
                fig_frontiere_sans_contraintes, df_frontiere_sans_contraintes = markowitz.calculate_efficient_frontier(
                    rendements, risk_free_rate=taux_sans_risque, contraintes=False
                )

                # Organiser les graphiques c√¥te √† c√¥te dans des colonnes
                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("#### Poids entre 0 et 1 : long only")
                    st.pyplot(fig_frontiere_avec_contraintes)   

                with col2:
                    st.markdown("#### Poids entre -1 et 1 : long and short")
                    st.pyplot(fig_frontiere_sans_contraintes)

                st.markdown("---")

                # Section pour afficher les poids du portefeuille de march√©
                st.subheader("8. Poids du Portefeuille de March√©")

                # Organiser les graphiques c√¥te √† c√¥te dans des colonnes
                col1, col2 = st.columns(2)

                with col1:
                    # Affichage des poids associ√©s au portefeuille de march√©
                    st.markdown("#### Poids entre 0 et 1 : long only")
                    st.dataframe(df_frontiere_avec_contraintes)

                with col2:
                    st.markdown("#### Poids entre -1 et 1 : long and short")
                    st.dataframe(df_frontiere_sans_contraintes)

        except Exception as e:
            st.error(f"Une erreur s'est produite lors de l'extraction des donn√©es : {e}")
